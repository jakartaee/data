// Copyright (c) 2022,2023 Contributors to the Eclipse Foundation
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

== Repository

In Domain-Driven Design (DDD) the repository pattern encapsulates the logic required to access data sources. The repository pattern consolidates data access functionality, providing better maintainability and decoupling the infrastructure or technology used to access databases from the domain model layer.

image::01-repository.png[alt=repository structure, width=70%, height=70%]

This pattern focuses on the closest proximity of entities and hides where the data comes from.

The Repository pattern is a well-documented way of working with a data source. In the book Patterns of Enterprise Application Architecture, Martin Fowler describes a repository as follows:

> A repository performs the tasks of an intermediary between the domain model layers and data mapping, acting in a similar way to a set of domain objects in memory. Client objects declaratively build queries and send them to the repositories for answers. Conceptually, a repository encapsulates a set of objects stored in the database and operations that can be performed on them, providing a way that is closer to the persistence layer. Repositories also support the purpose of separating, clearly and in one direction, the dependency between the work domain and the data allocation or mapping.

It also becomes very famous in Domain-Driven Design: Tackling Complexity in the Heart of Software by Eric Evans.

=== Repositories on Jakarta Data

A repository abstraction aims to significantly reduce the boilerplate code required to implement data access layers for various persistence stores.

The parent interface in Jakarta Data repository abstraction is DataRepository.

By default, Jakarta Data has support for three interfaces. However, the core is extensible. Therefore, a provider might extend one or more interfaces to a specific data target.

image::02-repositories.png[alt=Repositories types]

* Interface to generic CRUD operations on a repository for a specific type. This one we can see more often on several Java implementations.
* Interface with generic CRUD operations using the pagination feature.
* Interface for generic CRUD operations on a repository for a specific type. This repository follows reactive paradigms.

From the Java developer perspective, create an interface that is annotated with the Repository annotation and optionally extends one of the built-in repository interfaces.

So, given a ```Product``` entity where the ID is a ```long``` type, the repository would be:

[source,java]
----
@Repository
public interface ProductRepository extends CrudRepository<Product, Long> {

}
----


There is no nomenclature restriction to make mandatory the ```Repository``` suffix. Such as, you might represent the repository of the Car's entity as a ```Garage``` instead of ```CarRepository```.

[source,java]
----
@Repository
public interface Garage extends CrudRepository<Car, String> {

}
----

=== Entity Classes

Entity classes are simple Java objects with fields or accessor methods designating each entity property.

You may use ```jakarta.persistence.Entity``` and the corresponding entity-related annotations of the Jakarta Persistence specification in the same package (such as ```jakarta.persistence.Id``` and ```jakarta.persistence.Column```) to define and customize entities for relational databases.

You may use ```jakarta.nosql.mapping.Entity``` and the corresponding entity-related annotations of the Jakarta NoSQL specification in the same package (such as ```jakarta.nosql.mapping.Id``` and ```jakarta.nosql.mapping.Column```) to define and customize entities for NoSQL databases.

=== Queries Methods

In Jakarta Data, besides finding by an ID, custom queries can be written in two ways:

* Through Query annotation: It will create a method annotated with the @Query with the query.
* Using query by method convention: Using some pattern vocabulary will provide a query.

WARNING: Due to the variety of data sources, those resources might not work; it varies based on the Jakarta Data implementation and the database engine, which can provide queries on more than a Key or ID or not, such as a Key-value database.

==== Using the Query Annotation

The Query's annotation will support a search expression as a String. The specification won't define the query syntax, which might vary between vendors and data sources, such as SQL, JPA-QL, Cypher, CQL, etc.

[source,java]
----
@Repository
public interface ProductRepository extends CrudRepository<Product, Long> {
  @Query("SELECT p FROM Products p WHERE p.name=?1")  // example in JPQL
  Optional<Product> findByName(String name);
}
----

Jakarta Data also includes the ```Param``` annotation to define a binder annotation, where as with the query expression, each vendor will express the syntax freely such as ```?```, ```@```, etc..

[source,java]
----
@Repository
public interface ProductRepository extends CrudRepository<Product, Long> {
  @Query("SELECT p FROM Products p WHERE p.name=:name")  // example in JPQL
  Optional<Product> findByName(@Param("name") String name);
}
----


==== Query by Method

The Query by method mechanism allows for creating query commands by conventions.

E.g.:

[source,java]
----
@Repository
public interface ProductRepository extends CrudRepository<Product, Long> {

  List<Product> findByName(String name);

  @OrderBy("price")
  List<Product> findByNameLike(String namePattern);

  @OrderBy(value = "price", descending = true)
  List<Product> findByNameLikeAndPriceLessThan(String namePattern, float priceBelow);

}
----

The parsing query method name has two parts: the subject and the property.

The first part defines the query's subject or condition, and the second the condition value; both forms the predicate.

A predicate can refer only to a direct property of the managed entity. We also have the option to handle entities with another class on them.

==== Entity Property Names

Within an entity, property names must be unique ignoring case. For simple entity properties, the field or accessor method name serves as the entity property name. In the case of embedded classes, entity property names are computed by concatenating the field or accessor method names at each level.

Assume an Order entity has an Address with a ZipCode. In that case, the access is ```order.address.zipCode```. This form is used within annotations, such as ```@Query```,

[source,java]
----
@Repository
public interface OrderRepository extends CrudRepository<Order, Long> {

  @Query("SELECT order FROM Order order WHERE order.address.zipCode=?1")
  List<Order> withZipCode(ZipCode zipCode);

}
----

For queries by method name, the resolution algorithm starts by interpreting the whole part (AddressZipCode) as the property and checks the domain class for a property with that name (uncapitalized). If the algorithm succeeds, it uses that property.

[source,java]
----
@Repository
public interface OrderRepository extends CrudRepository<Order, Long> {

  Stream<Order> findByAddressZipCode(ZipCode zipCode);

}
----


Although this should work for most cases, to resolve this ambiguity, you can use ```_``` inside your method name to manually define traversal points.

[source,java]
----
@Repository
public interface OrderRepository extends CrudRepository<Order, Long> {

  Stream<Order> findByAddress_ZipCode(ZipCode zipCode);

}
----

WARNING: Define as a priority following standard Java naming conventions, camel case,  using underscore as the last resort.

In queries by method name, ```Id``` is an alias for the entity property that is designated as the id. Entity property names that are used in queries by method name must not contain reserved words.

===== Query Methods Keywords

The following table lists the subject keywords generally supported by Jakarta Data.

|===
|Keyword |Description

|findBy
|General query method returning the repository type.

|deleteBy
|Delete query method returning either no result (void) or the delete count.

|countBy
|Count projection returning a numeric result.

|existsBy
|Exists projection, returning typically a ```boolean``` result.
|===

Jakarta Data implementations support the following list of predicate keywords to the extent that the database is capable of the behavior. A repository method will raise `jakarta.data.exceptions.DataException` or a more specific subclass of the exception if the database does not provide the requested functionality.

|===
|Keyword |Description | Method signature Sample

|And
|The ```and``` operator.
|findByNameAndYear

|Or
|The ```or``` operator.
|findByNameOrYear

|Between
|Find results where the property is between the given values
|findByDateBetween

|Empty
|Find results where the property is an empty collection or has a null value.
|deleteByPendingTasksEmpty

|LessThan
|Find results where the property is less than the given value
|findByAgeLessThan

|GreaterThan
|Find results where the property is greater than the given value
|findByAgeGreaterThan

|LessThanEqual
|Find results where the property is less than or equal to the given value
|findByAgeLessThanEqual

|GreaterThanEqual
|Find results where the property is greater than or equal to the given value
|findByAgeGreaterThanEqual

|Like
|Finds string values "like" the given expression
|findByTitleLike

|IgnoreCase
|Requests that string values be compared independent of case for query conditions and ordering.
|findByStreetNameIgnoreCaseLike

|In
|Find results where the property is one of the values that are contained within the given list
|findByIdIn

|Null
|Finds results where the property has a null value.
|findByYearRetiredNull

|True
|Finds results where the property has a boolean value of true.
|findBySalariedTrue

|False
|Finds results where the property has a boolean value of false.
|findByCompletedFalse

|OrderBy
|Specify a static sorting order followed by the property path and direction of ascending.
|findByNameOrderByAge

|OrderBy____Desc
|Specify a static sorting order followed by the property path and direction of descending.
|findByNameOrderByAgeDesc

|OrderBy____Asc
|Specify a static sorting order followed by the property path and direction of ascending.
|findByNameOrderByAgeAsc

|OrderBy____(Asc\|Desc)*(Asc\|Desc)
|Specify several static sorting orders
|findByNameOrderByAgeAscNameDescYearAsc

|===

====== Logical Operator Precedence

For relational databases, the logical operator `And` takes precedence over `Or`, meaning that `And` is evaluated on conditions before `Or` when both are specified on the same method. For other database types, the precedence is limited to the capabilities of the database. For example, some graph databases are limited to precedence in traversal order.

=== Special Parameter Handling

Jakarta Data also supports particular parameters to define pagination and sorting.

Jakarta Data recognizes, when specified on a repository method after the query parameters, specific types, like ```Limit```, ```Pageable```, and ```Sort```, to dynamically apply limits, pagination, and sorting to queries. The following example demonstrates these features:

[source,java]
----
@Repository
public interface ProductRepository extends CrudRepository<Product, Long> {

  List<Product> findByName(String name, Pageable pageable);

  List<Product> findByNameLike(String pattern, Limit max, Sort... sorts);

}
----

You can define simple sorting expressions by using property names.

[source,java]
----
Sort name = Sort.asc("name");
----

You can combine sorting with a starting page and maximum page size by using property names.

[source,java]
----
Pageable pageable = Pageable.ofSize(20).page(1).sortBy(Sort.desc("price"));
first20 = products.findByNameLike(name, pageable);

----

=== Precedence of Sort Criteria

The specification defines different ways of providing sort criteria on queries. This section discusses how these different mechanisms relate to each other.

==== Sort Criteria within Query Language

Sort criteria can be hard-coded directly within query language by making use of the ```@Query``` annotation. A repository method that is annotated with ```@Query``` with a value that contains an ```ORDER BY``` clause (or query language equivalent) must not provide sort criteria via the other mechanisms.

A repository method that is annotated with ```@Query``` with a value that does not contain an ```ORDER BY``` clause and ends with a ```WHERE``` clause (or query language equivalents to these) can use other mechanisms that are defined by this specification for providing sort criteria.

==== Static Mechanisms for Sort Criteria

Sort criteria is provided statically for a repository method by using the ```OrderBy``` keyword or by annotating the method with one or more ```@OrderBy``` annotations. The ```OrderBy``` keyword cannot be intermixed with the ```@OrderBy``` annotation or the ```@Query``` annotation. Static sort criteria takes precedence over dynamic sort criteria in that static sort criteria is evaluated first. When static sort criteria sorts entities to the same position, dynamic sort criteria is applied to further order those entities.

==== Dynamic Mechanisms for Sort Criteria

Sort criteria is provided dynamically to repository methods either via ```Sort``` parameters or via a ```Pageable``` parameter that has one or more ```Sort``` values. ```Sort``` and```Pageable``` containing ```Sort``` must not both be provided to the same method.

==== Examples of Sort Criteria Precedence

The following examples work through scenarios where static and dynamic sort criteria are provided to the same method.

[source,java]
----
// Sorts first by type. When type is the same, applies the Pageable's sort criteria
Page<User> findByNameStartsWithOrderByType(String namePrefix, Pageable pagination);

// Sorts first by type. When type is the same, applies the criteria in the Sorts
List<User> findByNameStartsWithOrderByType(String namePrefix, Sort... sorts);

// Sorts first by age. When age is the same, applies the Pageable's sort criteria
@OrderBy("age")
Page<User> findByNameStartsWith(String namePrefix, Pageable pagination);

// Sorts first by age. When age is the same, applies the criteria in the Sorts
@OrderBy("age")
List<User> findByNameStartsWith(String namePrefix, Sort... sorts);

// Sorts first by name. When name is the same, applies the Pageable's sort criteria
@Query("SELECT u FROM User u WHERE (u.age > ?1)")
@OrderBy("name")
KeysetAwarePage<User> olderThan(int age, Pageable pagination);
----

=== Keyset Pagination

Keyset pagination aims to reduce missed and duplicate results across pages by querying relative to the observed values of entity properties that constitute the sorting criteria. Keyset pagination can also offer an improvement in performance because it avoids fetching and ordering results from prior pages by causing those results to be non-matching. A Jakarta Data provider appends additional conditions to the query and tracks keyset values automatically when `KeysetAwareSlice` or `KeysetAwarePage` are used as the repository method return type. The application invokes `nextPageable` or `previousPageable` on the keyset aware slice or page to obtain a `Pageable` which keeps track of the keyset values.

For example,

[source,java]
----
@Repository
public interface CustomerRepository extends CrudRepository<Customer, Long> {
  KeysetAwareSlice<Customer> findByZipcodeOrderByLastNameAscFirstNameAscIdAsc(
                                 int zipcode, Pageable pageable);
}
----

You can obtain the next page with,

[source,java]
----
for (Pageable p = Pageable.ofSize(50); p != null; ) {
  page = customers.findByZipcodeOrderByLastNameAscFirstNameAscIdAsc(55901, p);
  ...
  p = page.nextPageable();
}
----

Or you can obtain the next (or previous) page relative to a known entity,

[source,java]
----
Customer c = ...
Pageable p = Pageable.ofSize(50).afterKeyset(c.lastName, c.firstName, c.id);
page = customers.findByZipcodeOrderByLastNameAscFirstNameAscIdAsc(55902, p);
----

The sort criteria for a repository method that performs keyset pagination must uniquely identify each entity and must be provided by:

* `OrderBy` name pattern of the repository method (as in the examples above) or `@OrderBy` annotation(s) on the repository method.
* `Sort` parameters of the `Pageable` that is supplied to the repository method.

==== Example of Appending to Queries for Keyset Pagination

Without keyset pagination, a Jakarta Data provider that is based on Jakarta Persistence might compose the following JPQL for the `findByZipcodeOrderByLastNameAscFirstNameAscIdAsc` repository method from the prior example:

[source,jpql]
----
SELECT o FROM Customer o WHERE (o.zipCode = ?1)
                         ORDER BY o.lastName ASC, o.firstName ASC, o.id ASC
----

When keyset pagination is used, the keyset values from the `Cursor` of the `Pageable` are available as query parameters, allowing the Jakarta Data provider to append additional query conditions. For example,

[source,jpql]
----
SELECT o FROM Customer o WHERE (o.zipCode = ?1)
                           AND (   (o.lastName > ?2)
                                OR (o.lastName = ?2 AND o.firstName > ?3)
                                OR (o.lastName = ?2 AND o.firstName = ?3 AND o.id > ?4)
                               )
                         ORDER BY o.lastName ASC, o.firstName ASC, o.id ASC
----

==== Avoiding Missed and Duplicate Results

Because searching for the next page of results is relative to a last known position, it is possible with keyset pagination to allow some types of updates to data while pages are being traversed without causing missed results or duplicates to appear. If you add entities to a prior position in the traversal of pages, the shift forward of numerical position of existing entities will not cause duplicates entities to appear in your continued traversal of subsequent pages because keyset pagination does not query based on a numerical position. If you remove entities from a prior position in the traversal of pages, the shift backward of numerical position of existing entities will not cause missed entities in your continued traversal of subsequent pages because keyset pagination does not query based on a numerical position.

Other types of updates to data, however, will cause duplicate or missed results. If you modify entity properties which are used as the sort criteria, keyset pagination cannot prevent the same entity from appearing again or never appearing due to the altered values. If you add an entity that you previously removed, whether with different values or the same values, keyset pagination cannot prevent the entity from being missed or possibly appearing a second time due to its changed values.

==== Restrictions on use of Keyset Pagination

* The repository method signature must return `KeysetAwareSlice` or `KeysetAwarePage`. A repository method with return type of `KeysetAwareSlice` or `KeysetAwarePage` must raise `UnsupportedOperationException` if the database is incapable of keyset pagination.
* The repository method signature must accept a `Pageable` parameter.
* Sort criteria must be provided and should be minimal.
* The combination of provided sort criteria must uniquely identify each entity.
* Page numbers for keyset pagination are estimated relative to prior page requests or the observed absence of further results and are not accurate. Page numbers must not be relied upon when using keyset pagination.
* Page totals and result totals are not accurate for keyset pagination and must not be relied upon.
* A next or previous page can end up being empty. You cannot obtain a next or previous `Pageable` from an empty page because there are no keyset values relative to which to query.
* A repository method that is annotated with `@Query` and performs keyset pagination must omit the `ORDER BY` clause from the provided query and instead must supply the sort criteria via `@OrderBy` annotations or `Sort` parameters of `Pageable`. The provided query must end with a `WHERE` clause to which additional conditions can be appended by the Jakarta Data provider. The Jakarta Data provider is not expected to parse query text that is provided by the application.

==== Keyset Pagination Example with Sorts

Here is an example where an application uses `@Query` to provide a partial query to which the Jakarta Data provider can generate and append additional query conditions and an `ORDER BY` clause.

[source,java]
----
@Repository
public interface CustomerRepository extends CrudRepository<Customer, Long> {
  @Query("SELECT o FROM Customer o WHERE (o.totalSpent / o.totalPurchases > ?1)")
  KeysetAwareSlice<Customer> withAveragePurchaseAbove(float minimum, Pageable pagination);
}
----

Example traversal of pages:

[source,java]
----
for (Pageable p = Pageable.ofSize(25).sortBy(Sort.desc("yearBorn"), Sort.asc("name"), Sort.asc("id")));
     p != null; ) {
  page = customers.withAveragePurchaseAbove(50.0f, p);
  ...
  p = page.nextPageable();
}
----

== Jakarta Data Providers

=== Modes

Jakarta Data Providers implement the Jakarta Data API and specification requirements for one or more of the following modes.

==== Standalone Mode

Standalone mode means that the Jakarta Data provider is able to run on its own outside of a Jakarta EE platform or profile. Standalone Jakarta Data providers can choose whether or not to provide their own custom dependency injection leveraging `@Inject`, whether or not to provide extensions to tie into dependency injection via Jakarta Contexts and Dependency Injection (CDI) SE, whether or not to tie into the Jakarta Data Provider SPI, and whether or not to define other vendor specific ways of accessing Jakarta Data repositories. The Jakarta Data TCK includes a Standalone mode for validating Jakarta Data Providers that requires at least one of the first three of the aforementioned approaches.

==== Jakarta EE Mode

Jakarta EE mode means that the Jakarta Data provider is able to run within a Jakarta EE product, which is a product that provides a Jakarta EE profile or the full Jakarta EE platform, or a product that is comprised of a subset of Jakarta EE specifications. If the Jakarta EE product is running in a mode that provides Jakarta Contexts and Dependency Injection (CDI), then the Jakarta EE product coordinates CDI dependency injection for all Jakarta Data providers that it discovers via the Jakarta Data Provider SPI. Jakarta Data providers do not need to support CDI. Jakarta Data providers can continue using their own custom dependency injection models without CDI present. The Jakarta Data TCK includes a Jakarta EE mode for validating Jakarta Data Providers that leverages the `@Inject` annotation that is common to both CDI and custom dependency injection models.

==== Both Standalone and Jakarta EE Mode

A Jakarta Data provider can choose to support running in both Standalone and Jakarta EE Modes. In such cases, the Jakarta Data provider can certify with the Jakarta Data TCK in Standalone mode as a compatible Jakarta Data provider, and a Jakarta EE product that supports Jakarta Data will use the Jakarta Data provider to certify with the Jakarta Data TCK in Jakarta EE mode as a compatible Jakarta EE product.

=== Multiple Jakarta Data Providers

Multiple Jakarta Data Providers can coexist, allowing customers to write applications where some repositories are backed by relational databases and others by NoSQL databases, or other combinations. A Jakarta EE product that is aware of multiple Jakarta Data providers directs requests to each based on the type of entity annotations that each supports.

==== Discovery

Jakarta Data providers can make themselves available for discovery by Jakarta EE products via the Jakarta Data Provider SPI. This enables Jakarta EE products with CDI support to provide CDI dependency injection and other integration with CDI for Jakarta Data providers. Jakarta Data providers with their own custom dependency injection or other vendor-specific mechanisms are not required to implement or provide the Jakarta Data Provider SPI.
