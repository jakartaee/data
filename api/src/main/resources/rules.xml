<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2024,2025 Contributors to the Eclipse Foundation
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
  ~ SPDX-License-Identifier: Apache-2.0
  -->
<ruleset name="Jakarta Data"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>Rules for Jakarta Data.</description>

    <rule ref="category/java/bestpractices.xml">
        <exclude name="AbstractClassWithoutAbstractMethod"/>
    </rule>
    <rule ref="category/java/security.xml"/>
    <rule ref="category/java/performance.xml">
        <!-- Sure, a switch with only 2 options might be inefficient, but that
             isn't the point. I want switch instead of if/else to enforce that if
             someone ever adds another enum constant, the switch will cause a
             compile error, forcing them to implement the needed handling of it. -->
        <exclude name="TooFewBranchesForSwitch"/>
    </rule>

</ruleset>